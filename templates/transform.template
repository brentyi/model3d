package {{.package}}

// Transform is an invertible coordinate transformation.
type Transform interface {
	// Apply applies the transformation to c.
	Apply(c {{.coordType}}) {{.coordType}}

	// ApplyBounds gets a new bounding rectangle that is
	// guaranteed to bound the old bounding rectangle when
	// it is transformed.
	ApplyBounds(min, max {{.coordType}}) ({{.coordType}}, {{.coordType}})

	// Inverse gets an inverse transformation.
	//
	// The inverse may not perfectly invert bounds
	// transformations, since some information may be lost
	// during such a transformation.
	Inverse() Transform
}

// DistTransform is a Transform that changes Euclidean
// distances in a coordinate-independent fashion.
//
// The inverse of a DistTransform should also be a
// DistTransform.
type DistTransform interface {
	Transform

	// ApplyDistance computes the distance between
	// t.Apply(c1) and t.Apply(c2) given the distance
	// between c1 and c2, where c1 and c2 are arbitrary
	// points.
	ApplyDistance(d float64) float64
}

// Translate is a Transform that adds an offset to
// coordinates.
type Translate struct {
	Offset {{.coordType}}
}

func (t *Translate) Apply(c {{.coordType}}) {{.coordType}} {
	return c.Add(t.Offset)
}

func (t *Translate) ApplyBounds(min, max {{.coordType}}) ({{.coordType}}, {{.coordType}}) {
	return min.Add(t.Offset), max.Add(t.Offset)
}

func (t *Translate) Inverse() Transform {
	return &Translate{Offset: t.Offset.Scale(-1)}
}

func (t *Translate) ApplyDistance(d float64) float64 {
	return d
}

// {{.matrixType}}Transform is a Transform that applies a matrix
// to coordinates.
type {{.matrixType}}Transform struct {
	Matrix *{{.matrixType}}
}

func (m *{{.matrixType}}Transform) Apply(c {{.coordType}}) {{.coordType}} {
	return m.Matrix.MulColumn(c)
}

func (m *{{.matrixType}}Transform) ApplyBounds(min, max {{.coordType}}) ({{.coordType}}, {{.coordType}}) {
	var newMin, newMax {{.coordType}}
	for i, x := range []float64{min.X, max.X} {
		for j, y := range []float64{min.Y, max.Y} {
			{{if .model2d -}}
			c := m.Matrix.MulColumn(XY(x, y))
			if i == 0 && j == 0 {
			{{else -}}
			for k, z := range []float64{min.Z, max.Z} {
			c := m.Matrix.MulColumn(XYZ(x, y, z))
			if i == 0 && j == 0 && k == 0 {
			{{end -}}
				newMin, newMax = c, c
			} else {
				newMin = newMin.Min(c)
				newMax = newMax.Max(c)
			}
			{{if not .model2d}} } {{end -}}
		}
	}
	return newMin, newMax
}

func (m *{{.matrixType}}Transform) Inverse() Transform {
	return &{{.matrixType}}Transform{Matrix: m.Matrix.Inverse()}
}

// A JoinedTransform composes transformations from left to
// right.
type JoinedTransform []Transform

func (j JoinedTransform) Apply(c {{.coordType}}) {{.coordType}} {
	for _, t := range j {
		c = t.Apply(c)
	}
	return c
}

func (j JoinedTransform) ApplyBounds(min {{.coordType}}, max {{.coordType}}) ({{.coordType}}, {{.coordType}}) {
	for _, t := range j {
		min, max = t.ApplyBounds(min, max)
	}
	return min, max
}

func (j JoinedTransform) Inverse() Transform {
	res := JoinedTransform{}
	for i := len(j) - 1; i >= 0; i-- {
		res = append(res, j[i].Inverse())
	}
	return res
}

// ApplyDistance transforms a distance.
//
// It panic()s if any transforms don't implement
// DistTransform.
func (j JoinedTransform) ApplyDistance(d float64) float64 {
	for _, t := range j {
		d = t.(DistTransform).ApplyDistance(d)
	}
	return d
}

// Scale is a transform that scales an object.
type Scale struct {
	Scale float64
}

func (s *Scale) Apply(c {{.coordType}}) {{.coordType}} {
	return c.Scale(s.Scale)
}

func (s *Scale) ApplyBounds(min {{.coordType}}, max {{.coordType}}) ({{.coordType}}, {{.coordType}}) {
	return min.Scale(s.Scale), max.Scale(s.Scale)
}

func (s *Scale) Inverse() Transform {
	return &Scale{Scale: 1/s.Scale}
}

func (s *Scale) ApplyDistance(d float64) float64 {
	return d * s.Scale
}

// ScaleSolid creates a new Solid that scales incoming
// coordinates c by 1/s.
// Thus, the new solid is s times larger.
func ScaleSolid(solid Solid, s float64) Solid {
	return TransformSolid(&Scale{Scale: s}, solid)
}

// TransformSolid applies t to the solid s to produce a
// new, transformed solid.
func TransformSolid(t Transform, s Solid) Solid {
	min, max := t.ApplyBounds(s.Min(), s.Max())
	return &transformedSolid{
		min: min,
		max: max,
		s:   s,
		inv: t.Inverse(),
	}
}

// TransformSDF applies t to the SDF s to produce a new,
// transformed SDF.
func TransformSDF(t DistTransform, s SDF) SDF {
	min, max := t.ApplyBounds(s.Min(), s.Max())
	return &transformedSDF{
		min: min,
		max: max,
		s:   s,
		t:   t,
		inv: t.Inverse().(DistTransform),
	}
}

type transformedSolid struct {
	min {{.coordType}}
	max {{.coordType}}
	s   Solid
	inv Transform
}

func (t *transformedSolid) Min() {{.coordType}} {
	return t.min
}

func (t *transformedSolid) Max() {{.coordType}} {
	return t.max
}

func (t *transformedSolid) Contains(c {{.coordType}}) bool {
	return InBounds(t, c) && t.s.Contains(t.inv.Apply(c))
}

type transformedSDF struct {
	min {{.coordType}}
	max {{.coordType}}
	s   SDF
	t   DistTransform
	inv DistTransform
}

func (t *transformedSDF) Min() {{.coordType}} {
	return t.min
}

func (t *transformedSDF) Max() {{.coordType}} {
	return t.max
}

func (t *transformedSDF) SDF(c {{.coordType}}) float64 {
	return t.t.ApplyDistance(t.s.SDF(t.inv.Apply(c)))
}
